#!/usr/bin/env python3
"""
Poundwholesale Co Uk Login Script
Auto-generated by IntelligentSupplierScriptGenerator on 2025-07-07T19:08:03.094365

Provides login automation for https://www.poundwholesale.co.uk/
"""

import asyncio
import logging
import os
from datetime import datetime
from typing import Dict, Any
from playwright.async_api import async_playwright, Page

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
log = logging.getLogger(__name__)

# Configuration
SUPPLIER_URL = "https://www.poundwholesale.co.uk/"
EMAIL_SELECTOR = "input[type='email']"
PASSWORD_SELECTOR = "input[type='password']"
SUBMIT_SELECTOR = "button[type='submit']"

class Poundwholesale_Co_UkLogin:
    """Login automation for https://www.poundwholesale.co.uk/"""
    
    def __init__(self, email: str, password: str, test_mode: bool = False):
        self.email = email
        self.password = password
        self.test_mode = test_mode
        self.page: Page = None
        self.browser = None
        self.context = None
    
    async def connect_to_browser(self) -> bool:
        """Connect to existing Chrome debug instance"""
        try:
            playwright = await async_playwright().start()
            self.browser = await playwright.chromium.connect_over_cdp("http://localhost:9222")
            
            if self.browser.contexts:
                self.context = self.browser.contexts[0]
            else:
                self.context = await self.browser.new_context()
            
            if self.context.pages:
                self.page = self.context.pages[0]
            else:
                self.page = await self.context.new_page()
                
            await self.page.bring_to_front()
            return True
            
        except Exception as e:
            log.error(f"Failed to connect to browser: {e}")
            return False
    
    async def check_login_status(self) -> bool:
        """Check if already logged in"""
        try:
            await self.page.goto(SUPPLIER_URL)
            await self.page.wait_for_load_state('domcontentloaded')
            
            # Look for logout indicators or account areas
            logout_indicators = [
                "text=logout", "text=sign out", "text=my account", 
                ".logout", ".signout", ".account"
            ]
            
            for indicator in logout_indicators:
                try:
                    element = await self.page.query_selector(indicator)
                    if element and await element.is_visible():
                        log.info("✅ Already logged in")
                        return True
                except:
                    continue
            
            log.info("❌ Not logged in")
            return False
            
        except Exception as e:
            log.error(f"Failed to check login status: {e}")
            return False
    
    async def perform_login(self) -> Dict[str, Any]:
        """Perform login sequence"""
        try:
            log.info(f"🔐 Starting login to {SUPPLIER_URL}")
            
            # Check if already logged in
            if await self.check_login_status():
                return {"success": True, "message": "Already logged in", "action": "none"}
            
            # Fill email field
            try:
                await self.page.fill(EMAIL_SELECTOR, self.email)
                log.info("✅ Email filled")
            except Exception as e:
                log.error(f"Failed to fill email: {e}")
                if self.test_mode:
                    return {"success": False, "error": f"Email selector failed: {EMAIL_SELECTOR}", "step": "email"}
                raise
            
            # Fill password field
            try:
                await self.page.fill(PASSWORD_SELECTOR, self.password)
                log.info("✅ Password filled")
            except Exception as e:
                log.error(f"Failed to fill password: {e}")
                if self.test_mode:
                    return {"success": False, "error": f"Password selector failed: {PASSWORD_SELECTOR}", "step": "password"}
                raise
            
            # Click submit button
            try:
                await self.page.click(SUBMIT_SELECTOR)
                log.info("✅ Submit button clicked")
            except Exception as e:
                log.error(f"Failed to click submit: {e}")
                if self.test_mode:
                    return {"success": False, "error": f"Submit selector failed: {SUBMIT_SELECTOR}", "step": "submit"}
                raise
            
            # Wait for navigation or login completion
            try:
                await self.page.wait_for_load_state('domcontentloaded', timeout=10000)
            except:
                pass  # Continue even if timeout
            
            # Verify login success
            if await self.check_login_status():
                log.info("✅ Login successful")
                return {"success": True, "message": "Login completed successfully"}
            else:
                log.error("❌ Login failed - still not logged in")
                return {"success": False, "error": "Login failed - verification check failed", "step": "verification"}
                
        except Exception as e:
            log.error(f"Login failed: {e}")
            return {"success": False, "error": str(e), "step": "unknown"}

# Test function for validation
async def test_login(email: str, password: str) -> Dict[str, Any]:
    """Test login functionality"""
    try:
        login_handler = Poundwholesale_Co_UkLogin(email, password, test_mode=True)
        
        if not await login_handler.connect_to_browser():
            return {"success": False, "error": "Failed to connect to browser"}
        
        result = await login_handler.perform_login()
        return result
        
    except Exception as e:
        return {"success": False, "error": str(e)}

# Standalone function expected by orchestrator
async def perform_login(page: Page, credentials: Dict[str, Any]) -> bool:
    """
    Standalone function expected by run_complete_fba_system.py
    
    Args:
        page: Playwright page object
        credentials: Dict with 'email' and 'password' keys
        
    Returns:
        bool: True if login successful, False otherwise
    """
    try:
        email = credentials.get("email")
        password = credentials.get("password")
        
        if not email or not password:
            log.error("Missing email or password in credentials")
            return False
        
        log.info(f"🔐 Starting login to {SUPPLIER_URL}")
        
        # Navigate to supplier URL
        await page.goto(SUPPLIER_URL)
        await page.wait_for_load_state('domcontentloaded')
        
        # Fill email field
        try:
            await page.fill(EMAIL_SELECTOR, email)
            log.info("✅ Email filled")
        except Exception as e:
            log.error(f"Failed to fill email: {e}")
            return False
        
        # Fill password field
        try:
            await page.fill(PASSWORD_SELECTOR, password)
            log.info("✅ Password filled")
        except Exception as e:
            log.error(f"Failed to fill password: {e}")
            return False
        
        # Click submit button
        try:
            await page.click(SUBMIT_SELECTOR)
            log.info("✅ Submit button clicked")
        except Exception as e:
            log.error(f"Failed to click submit: {e}")
            return False
        
        # Wait for navigation
        try:
            await page.wait_for_load_state('domcontentloaded', timeout=10000)
        except:
            pass  # Continue even if timeout
        
        # Check if login was successful by looking for logout indicators
        logout_indicators = [
            "text=logout", "text=sign out", "text=my account", 
            ".logout", ".signout", ".account"
        ]
        
        for indicator in logout_indicators:
            try:
                element = await page.query_selector(indicator)
                if element and await element.is_visible():
                    log.info("✅ Login successful - found logout indicator")
                    return True
            except:
                continue
        
        log.error("❌ Login failed - no logout indicators found")
        return False
        
    except Exception as e:
        log.error(f"Login failed: {e}")
        return False

if __name__ == "__main__":
    # Test mode execution
    import sys
    import json
    if len(sys.argv) >= 3:
        email = sys.argv[1]
        password = sys.argv[2]
        result = asyncio.run(test_login(email, password))
        print(json.dumps(result, indent=2))
    else:
        print("Usage: python {__file__} <email> <password>")
