
# Add these lines after the imports in passive_extraction_workflow_latest.py:

import signal
from datetime import datetime

# Add this function before the class definition:

def setup_signal_handlers(workflow_instance):
    """Setup signal handlers for external backup triggering"""
    
    def handle_backup_signal(signum, frame):
        """Handle SIGUSR1 signal to trigger backup saves"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            print(f"\n🔔 [{timestamp}] External backup signal received")
            
            # Create backup files with timestamp
            if hasattr(workflow_instance, 'linking_map') and workflow_instance.linking_map:
                backup_linking_path = f"/mnt/c/Users/chris/Cloud-Drive_christianhaddad8@gmail.com/Cloud-Drive/Full/claude code/Amazon-FBA-Agent-System-v3/OUTPUTS/FBA_ANALYSIS/Linking map/linking_map_signal_backup_{timestamp}.json"
                
                import json
                with open(backup_linking_path, 'w', encoding='utf-8') as f:
                    json.dump(workflow_instance.linking_map, f, indent=2, ensure_ascii=False)
                
                print(f"✅ [{timestamp}] Linking map backed up: {len(workflow_instance.linking_map)} entries")
            
            # Also trigger the existing save function if available
            if hasattr(workflow_instance, '_save_linking_map'):
                workflow_instance._save_linking_map()
                print(f"✅ [{timestamp}] Main linking map updated")
                
            print(f"📁 [{timestamp}] Signal-triggered backup complete")
            
        except Exception as e:
            print(f"❌ Error in signal handler: {e}")
    
    # Register the signal handler
    signal.signal(signal.SIGUSR1, handle_backup_signal)
    print("🔧 Signal handler registered (SIGUSR1 = external backup trigger)")

# Add this line in the __init__ method of your main workflow class:
# setup_signal_handlers(self)
