#!/usr/bin/env python3
"""
poundwholesale-co-uk LangGraph Integration Script
Auto-generated by supplier_script_generator.py on 2025-07-05T20:51:29.825447

This script integrates poundwholesale-co-uk automation with the LangGraph workflow.
Provides "once per supplier" setup and session management.
"""

import asyncio
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
log = logging.getLogger(__name__)

class Poundwholesale_Co_UkLangGraphIntegration:
    """LangGraph workflow integration for poundwholesale-co-uk"""
    
    def __init__(self):
        self.supplier_id = "poundwholesale-co-uk"
        self.supplier_url = "https://www.poundwholesale.co.uk/"
        self.scripts_dir = Path("scripts")
        self.cache_dir = Path("cache")
        self.config_dir = Path("config")
        
    async def setup_supplier_session(self, page, credentials: Optional[Dict] = None) -> Dict[str, Any]:
        """
        Complete supplier setup - LOGIN + PRODUCT DISCOVERY
        This is the main "once per supplier" workflow
        """
        try:
            log.info(f"🚀 Starting complete supplier setup for {self.supplier_id}")
            
            setup_result = {
                "supplier_id": self.supplier_id,
                "supplier_url": self.supplier_url,
                "setup_timestamp": datetime.now().isoformat(),
                "login_success": False,
                "product_discovery_success": False,
                "products_found": 0,
                "errors": []
            }
            
            # Step 1: Perform login
            log.info("🔐 Step 1: Performing login...")
            login_success = await self.perform_login(page, credentials)
            setup_result["login_success"] = login_success
            
            if not login_success:
                setup_result["errors"].append("Login failed")
                log.warning("⚠️ Login failed - continuing with product discovery")
            else:
                log.info("✅ Login successful")
            
            # Step 2: Discover and extract products
            log.info("🕷️ Step 2: Product discovery and extraction...")
            products = await self.extract_products(page, max_pages=2)
            setup_result["products_found"] = len(products)
            setup_result["product_discovery_success"] = len(products) > 0
            
            if not products:
                setup_result["errors"].append("No products found")
                log.warning("⚠️ No products discovered")
            else:
                log.info(f"✅ Discovered {len(products)} products")
            
            # Step 3: Save session state
            await self.save_session_state(setup_result)
            
            log.info(f"🎉 Supplier setup complete for {self.supplier_id}")
            return setup_result
            
        except Exception as e:
            log.error(f"❌ Supplier setup failed: {e}")
            setup_result["errors"].append(str(e))
            return setup_result
    
    async def perform_login(self, page, credentials: Optional[Dict] = None) -> bool:
        """Perform login using generated login script"""
        try:
            # Import and use the generated login script
            import sys
            sys.path.append(str(self.scripts_dir))
            
            from poundwholesale-co-uk_login import poundwholesale_co_uk_login
            
            email = credentials.get('email') if credentials else None
            password = credentials.get('password') if credentials else None
            
            return await poundwholesale_co_uk_login(page, email, password)
            
        except Exception as e:
            log.error(f"Login integration failed: {e}")
            return False
    
    async def extract_products(self, page, max_pages: int = 5) -> list:
        """Extract products using generated extraction script"""
        try:
            # Import and use the generated product extractor
            import sys
            sys.path.append(str(self.scripts_dir))
            
            from poundwholesale-co-uk_product_extractor import extract_poundwholesale_co_uk_products
            
            return await extract_poundwholesale_co_uk_products(page, max_pages=max_pages)
            
        except Exception as e:
            log.error(f"Product extraction integration failed: {e}")
            return []
    
    async def save_session_state(self, setup_result: Dict[str, Any]):
        """Save session state for later use"""
        try:
            state_file = self.cache_dir / f"{self.supplier_id}_session_state.json"
            state_file.parent.mkdir(exist_ok=True)
            
            with open(state_file, 'w', encoding='utf-8') as f:
                json.dump(setup_result, f, indent=2)
            
            log.info(f"💾 Session state saved: {state_file}")
            
        except Exception as e:
            log.error(f"Failed to save session state: {e}")
    
    async def load_session_state(self) -> Optional[Dict[str, Any]]:
        """Load existing session state"""
        try:
            state_file = self.cache_dir / f"{self.supplier_id}_session_state.json"
            
            if state_file.exists():
                with open(state_file, 'r') as f:
                    return json.load(f)
            
            return None
            
        except Exception as e:
            log.error(f"Failed to load session state: {e}")
            return None

# LangGraph workflow integration function
async def setup_poundwholesale_co_uk_supplier(page, credentials: Optional[Dict] = None) -> Dict[str, Any]:
    """
    Main function for LangGraph workflow integration
    
    Args:
        page: Playwright page object
        credentials: Login credentials dict with 'email' and 'password'
    
    Returns:
        dict: Setup result with success status and extracted data
    """
    try:
        integration = Poundwholesale_Co_UkLangGraphIntegration()
        return await integration.setup_supplier_session(page, credentials)
    except Exception as e:
        log.error(f"LangGraph integration failed: {e}")
        return {
            "supplier_id": "poundwholesale-co-uk",
            "setup_timestamp": datetime.now().isoformat(),
            "login_success": False,
            "product_discovery_success": False,
            "products_found": 0,
            "errors": [str(e)]
        }

if __name__ == "__main__":
    # Test the integration
    async def test_integration():
        from playwright.async_api import async_playwright
        
        playwright = await async_playwright().start()
        browser = await playwright.chromium.connect_over_cdp("http://localhost:9222")
        context = browser.contexts[0] if browser.contexts else await browser.new_context()
        page = context.pages[0] if context.pages else await context.new_page()
        
        # Test credentials (replace with real values)
        test_credentials = {
            "email": "test@example.com",
            "password": "test_password"
        }
        
        result = await setup_poundwholesale_co_uk_supplier(page, test_credentials)
        
        log.info(f"✅ Integration test result: {result}")
    
    asyncio.run(test_integration())
