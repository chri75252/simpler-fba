#!/usr/bin/env python3
"""
poundwholesale-co-uk Login Automation Script
Auto-generated by supplier_script_generator.py on 2025-07-05T20:51:19.461338

This script provides login automation for https://www.poundwholesale.co.uk/
Integrates with LangGraph workflow and Chrome CDP connection.
"""

import asyncio
import logging
from datetime import datetime
from playwright.async_api import async_playwright

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
log = logging.getLogger(__name__)

# Configuration
SUPPLIER_URL = "https://www.poundwholesale.co.uk/"
SUPPLIER_EMAIL = ""  # Set via environment variable
SUPPLIER_PASSWORD = ""  # Set via environment variable  
CDP_PORT = 9222

class Poundwholesale_Co_UkLogin:
    """Login automation for poundwholesale-co-uk"""
    
    def __init__(self):
        self.page = None
        self.browser = None
        self.context = None
    
    async def connect(self):
        """Connect to Chrome debug instance"""
        try:
            log.info(f"Connecting to Chrome debug instance on port {CDP_PORT}")
            playwright = await async_playwright().start()
            self.browser = await playwright.chromium.connect_over_cdp(f"http://localhost:{CDP_PORT}")
            
            if self.browser.contexts:
                self.context = self.browser.contexts[0]
                log.info("Using existing browser context")
            else:
                self.context = await self.browser.new_context()
                log.info("Created new browser context")
            
            if self.context.pages:
                self.page = self.context.pages[0]
                log.info(f"Using existing page: {self.page.url}")
            else:
                self.page = await self.context.new_page()
                log.info("Created new page")
                
            await self.page.bring_to_front()
            return True
            
        except Exception as e:
            log.error(f"Failed to connect to Chrome: {e}")
            return False
    
    async def check_login_status(self):
        """Check if already logged in"""
        try:
            # Look for logout indicators
            logout_selectors = [
                "a[href*='logout']",
                "a:has-text('Logout')",
                "a:has-text('Log Out')",
                ".logout-link"
            ]
            
            for selector in logout_selectors:
                elements = await self.page.query_selector_all(selector)
                if elements:
                    log.info("‚úÖ Already logged in (logout link found)")
                    return True
            
            log.info("‚ùå Not logged in")
            return False
            
        except Exception as e:
            log.error(f"Failed to check login status: {e}")
            return False
    
    async def discover_login_elements(self):
        """Auto-discover login elements using vision system"""
        try:
            log.info("üîç Auto-discovering login elements...")
            
            # Navigate to homepage first
            await self.page.goto(SUPPLIER_URL, wait_until='domcontentloaded')
            await self.page.wait_for_load_state('networkidle', timeout=10000)
            
            # Take discovery screenshot
            screenshot = f"../discovery/login_discovery_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            await self.page.screenshot(path=screenshot, full_page=True)
            log.info(f"Discovery screenshot: {screenshot}")
            
            # Import vision discovery engine
            import sys
            sys.path.append('../../tools')
            from vision_discovery_engine import VisionDiscoveryEngine
            
            discovery = VisionDiscoveryEngine(self.page)
            login_config = await discovery.discover_login_elements()
            
            if login_config:
                log.info("‚úÖ Login elements discovered successfully")
                
                # Save configuration
                config_file = "../config/login_config.json"
                with open(config_file, 'w', encoding='utf-8') as f:
                    json.dump(login_config, f, indent=2)
                
                return login_config
            
            log.warning("‚ö†Ô∏è Could not auto-discover login elements")
            return None
            
        except Exception as e:
            log.error(f"Element discovery failed: {e}")
            return None
    
    async def perform_login(self, email=None, password=None):
        """Perform login workflow"""
        try:
            log.info("üöÄ Starting login workflow")
            
            # Connect to browser
            if not await self.connect():
                return False
            
            # Check if already logged in
            if await self.check_login_status():
                return True
            
            # Discover login elements if needed
            login_config = await self.discover_login_elements()
            
            if not login_config:
                log.error("‚ùå Cannot proceed without login configuration")
                return False
            
            # Navigate to login page
            await self.page.goto(login_config.get('login_url', SUPPLIER_URL))
            await self.page.wait_for_load_state('networkidle', timeout=10000)
            
            # Fill credentials
            email = email or SUPPLIER_EMAIL
            password = password or SUPPLIER_PASSWORD
            
            if not email or not password:
                log.error("‚ùå Email and password required")
                return False
            
            await self.page.fill(login_config['email_selector'], email)
            await self.page.fill(login_config['password_selector'], password)
            
            # Submit form
            if login_config.get('submit_selector'):
                await self.page.click(login_config['submit_selector'])
            else:
                await self.page.press(login_config['password_selector'], 'Enter')
            
            await self.page.wait_for_load_state('networkidle', timeout=15000)
            
            # Verify success
            success = await self.check_login_status()
            
            if success:
                log.info("üéâ LOGIN SUCCESSFUL!")
            else:
                log.error("‚ùå LOGIN FAILED")
            
            return success
            
        except Exception as e:
            log.error(f"Login workflow failed: {e}")
            return False

# Standalone function for integration
async def poundwholesale_co_uk_login(page=None, email=None, password=None):
    """
    Standalone login function for integration with other scripts
    
    Args:
        page: Optional Playwright page object
        email: Supplier email  
        password: Supplier password
    
    Returns:
        bool: True if login successful
    """
    try:
        login = Poundwholesale_Co_UkLogin()
        
        if page:
            login.page = page
            return await login.check_login_status() or await login.perform_login(email, password)
        else:
            return await login.perform_login(email, password)
            
    except Exception as e:
        log.error(f"Standalone login failed: {e}")
        return False

if __name__ == "__main__":
    # Test the login functionality
    async def test_login():
        login = Poundwholesale_Co_UkLogin()
        success = await login.perform_login()
        if success:
            log.info("‚úÖ Login test completed successfully")
        else:
            log.error("‚ùå Login test failed")
    
    asyncio.run(test_login())
