[tox]
# Amazon FBA Agent System v3.5 - Tox configuration for multi-environment testing
# Ensures consistent testing across different Python versions and dependency sets

# Minimum tox version required
minversion = 4.0

# Default environments to run when 'tox' is called without arguments
envlist = 
    py312
    lint
    type-check
    security
    coverage-report

# Skip missing Python interpreters instead of failing
skip_missing_interpreters = true

[testenv]
# Base configuration for all test environments

# Use specific Python version for reproducible testing
basepython = python3.12

# Install dependencies from lock file for reproducibility
deps = 
    pytest>=7.4.3
    pytest-asyncio>=0.21.1
    pytest-mock>=3.12.0
    pytest-cov>=4.0.0
    pytest-timeout>=2.1.0
    pytest-xdist>=3.3.1
    faker>=20.1.0
    factory-boy>=3.3.0
    # Install project in editable mode with dev dependencies
    -e .[dev]

# Set environment variables for testing
setenv =
    PYTHONPATH = {toxinidir}
    PYTHONDONTWRITEBYTECODE = 1
    # Use test environment configuration
    APP_ENV = testing
    TEST_MODE = true
    MOCK_EXTERNAL_APIS = true
    # Disable network calls for most tests
    PYTEST_DISABLE_PLUGIN_AUTOLOAD = 1
    # Set test data directory
    TEST_DATA_DIR = {toxinidir}/tests/fixtures
    # Disable logging to reduce noise in tests
    LOG_LEVEL = WARNING

# Change to project directory before running commands
changedir = {toxinidir}

# Commands to run for testing
commands = 
    # Run pytest with coverage
    pytest {posargs}

# Use parallel processing for test isolation
parallel_show_output = true

[testenv:py312]
# Main testing environment for Python 3.12
description = Run unit and integration tests with Python 3.12

# Additional test dependencies
deps = 
    {[testenv]deps}
    # Add any Python 3.12 specific dependencies here

commands = 
    # Run full test suite with coverage
    pytest --cov-report=term-missing --cov-report=html:htmlcov --cov-report=xml:coverage.xml {posargs}

[testenv:lint]
# Code linting and formatting checks
description = Run code quality checks (ruff, black, isort)

deps = 
    ruff>=0.1.0
    black>=23.12.0
    isort>=5.13.0

# Don't install the package for linting
skip_install = false

commands = 
    # Check code formatting with black
    black --check --diff tools/ config/ utils/ monitoring_system.py
    
    # Check import sorting with isort
    isort --check-only --diff tools/ config/ utils/ monitoring_system.py
    
    # Run ruff linting
    ruff check tools/ config/ utils/ monitoring_system.py
    
    # Check for common security issues
    ruff check --select=S tools/ config/ utils/ monitoring_system.py

[testenv:format]
# Auto-format code
description = Auto-format code with black and isort

deps = 
    {[testenv:lint]deps}

skip_install = false

commands = 
    # Format code with black
    black tools/ config/ utils/ monitoring_system.py
    
    # Sort imports with isort
    isort tools/ config/ utils/ monitoring_system.py
    
    # Fix auto-fixable ruff issues
    ruff check --fix tools/ config/ utils/ monitoring_system.py

[testenv:type-check]
# Static type checking with mypy
description = Run static type checking with mypy

deps = 
    mypy>=1.7.1
    types-requests>=2.31.0
    types-PyYAML>=6.0.0
    types-python-dateutil>=2.8.0
    types-psutil>=5.9.0

skip_install = false

commands = 
    # Run mypy type checking
    mypy tools/ config/ utils/ monitoring_system.py

[testenv:security]
# Security vulnerability scanning
description = Run security vulnerability scans

deps = 
    safety>=2.3.0
    bandit>=1.7.5
    pip-audit>=2.6.0

skip_install = true

commands = 
    # Check for known vulnerabilities in dependencies
    safety check --json
    
    # Audit pip packages for vulnerabilities
    pip-audit --desc --format=json
    
    # Check for common security issues in code
    bandit -r tools/ config/ utils/ monitoring_system.py -f json

[testenv:performance]
# Performance testing and profiling
description = Run performance tests and profiling

deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    memory-profiler>=0.61.0

commands = 
    # Run performance benchmarks
    pytest tests/performance/ --benchmark-only {posargs}

[testenv:integration]
# Integration tests that require external services
description = Run integration tests (requires external services)

deps = 
    {[testenv]deps}

setenv = 
    {[testenv]setenv}
    # Enable external API calls for integration tests
    MOCK_EXTERNAL_APIS = false
    TEST_MODE = false

commands = 
    # Run only integration tests
    pytest -m integration {posargs}

[testenv:e2e]
# End-to-end tests
description = Run end-to-end tests (requires full system setup)

deps = 
    {[testenv]deps}
    playwright>=1.40.0

setenv = 
    {[testenv]setenv}
    # Use real environment for E2E tests
    MOCK_EXTERNAL_APIS = false
    TEST_MODE = false
    HEADLESS_BROWSER = true

commands = 
    # Install playwright browsers
    playwright install chromium
    
    # Run E2E tests
    pytest -m e2e --timeout=600 {posargs}

[testenv:coverage-report]
# Generate comprehensive coverage reports
description = Generate coverage reports from previous test runs

deps = 
    coverage[toml]>=7.0.0

skip_install = true

commands = 
    # Combine coverage data from all test runs
    coverage combine
    
    # Generate terminal report
    coverage report --show-missing
    
    # Generate HTML report
    coverage html -d htmlcov
    
    # Generate XML report for CI
    coverage xml

[testenv:docs]
# Build and check documentation
description = Build and validate documentation

deps = 
    sphinx>=7.0.0
    sphinx-rtd-theme>=1.3.0
    myst-parser>=2.0.0

commands = 
    # Build documentation
    sphinx-build -W -b html docs docs/_build/html
    
    # Check for broken links
    sphinx-build -W -b linkcheck docs docs/_build/linkcheck

[testenv:clean]
# Clean up generated files
description = Clean up generated files and caches

deps = 

skip_install = true

allowlist_externals = 
    rm
    find

commands = 
    # Remove Python cache files
    find . -type f -name "*.pyc" -delete
    find . -type d -name "__pycache__" -delete
    
    # Remove test artifacts
    rm -rf htmlcov/
    rm -rf .coverage
    rm -rf coverage.xml
    rm -rf junit.xml
    rm -rf .pytest_cache/
    rm -rf .tox/
    rm -rf dist/
    rm -rf build/
    rm -rf *.egg-info/

[coverage:run]
# Coverage configuration
source = tools, config, utils, monitoring_system
omit = 
    */tests/*
    */archive/*
    */dormant/*
    */__pycache__/*
    */venv/*
    */.venv/*
    */build/*
    */dist/*

[coverage:report]
# Coverage reporting configuration
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
# HTML coverage report configuration
directory = htmlcov
title = Amazon FBA Agent System v3.5 Coverage Report